module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AMPERSAND": parse_AMPERSAND,
        "AND": parse_AND,
        "AROBAS": parse_AROBAS,
        "AS": parse_AS,
        "COMMA": parse_COMMA,
        "COMP_OP": parse_COMP_OP,
        "DOLLAR": parse_DOLLAR,
        "ELIF": parse_ELIF,
        "ELSE": parse_ELSE,
        "ENDIF": parse_ENDIF,
        "EXCLAMATION": parse_EXCLAMATION,
        "FALSE": parse_FALSE,
        "GT": parse_GT,
        "GTE": parse_GTE,
        "IF": parse_IF,
        "IN": parse_IN,
        "INCLUDE": parse_INCLUDE,
        "IS": parse_IS,
        "LBRACE": parse_LBRACE,
        "LBRACKET": parse_LBRACKET,
        "LPAREN": parse_LPAREN,
        "LT": parse_LT,
        "LTE": parse_LTE,
        "MATCHES": parse_MATCHES,
        "NOT": parse_NOT,
        "OR": parse_OR,
        "PIPE": parse_PIPE,
        "PLUS": parse_PLUS,
        "RBRACE": parse_RBRACE,
        "RBRACKET": parse_RBRACKET,
        "RPAREN": parse_RPAREN,
        "SET": parse_SET,
        "SHARP": parse_SHARP,
        "STAR": parse_STAR,
        "TRUE": parse_TRUE,
        "__": parse___,
        "anything": parse_anything,
        "array": parse_array,
        "assignement": parse_assignement,
        "boolean": parse_boolean,
        "boolean_expression": parse_boolean_expression,
        "boolean_literal": parse_boolean_literal,
        "conditional_property": parse_conditional_property,
        "date": parse_date,
        "default": parse_default,
        "expression": parse_expression,
        "expression_op": parse_expression_op,
        "function_call": parse_function_call,
        "integer": parse_integer,
        "list": parse_list,
        "literal": parse_literal,
        "lnull": parse_lnull,
        "lundefined": parse_lundefined,
        "null": parse_null,
        "number": parse_number,
        "number_literal": parse_number_literal,
        "object": parse_object,
        "property": parse_property,
        "ref_call": parse_ref_call,
        "ref_decl": parse_ref_decl,
        "safe_identifier": parse_safe_identifier,
        "string": parse_string,
        "string_literal": parse_string_literal,
        "string_regular": parse_string_regular,
        "string_simple": parse_string_simple,
        "top_level_assignement": parse_top_level_assignement,
        "toplevel": parse_toplevel,
        "type": parse_type,
        "type_choice": parse_type_choice,
        "type_single": parse_type_single,
        "undefined": parse_undefined,
        "variable": parse_variable,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "toplevel";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_toplevel() {
        var cacheKey = 'toplevel@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_type();
        if (result3 !== null) {
          var result5 = parse___();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(node) {
            return node;
          })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type() {
        var cacheKey = 'type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_ref_decl();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          var result4 = parse_type_choice();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(decl, t) {
            if (decl) {
            return new TypeRef(decl, t);
          }
          return t;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_choice() {
        var cacheKey = 'type_choice@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result11 = parse___();
        var result3 = result11 !== null ? result11 : '';
        if (result3 !== null) {
          var result4 = parse_type_single();
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result9 = parse_PIPE();
            if (result9 !== null) {
              var result10 = parse_type_single();
              if (result10 !== null) {
                var result7 = [result9, result10];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            var result8 = result7 !== null
              ? (function(t) { return t; })(result7[1])
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var savedPos3 = pos;
              var result9 = parse_PIPE();
              if (result9 !== null) {
                var result10 = parse_type_single();
                if (result10 !== null) {
                  var result7 = [result9, result10];
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
              var result8 = result7 !== null
                ? (function(t) { return t; })(result7[1])
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(type, typearr) {
            var types, t, _i, _ref, _len;
          if (typearr.length > 0) {
            types = new TypeChoice();
            types.addType(type);
            for (_i = 0, _len = (_ref = typearr).length; _i < _len; ++_i) {
              t = _ref[_i];
              types.addType(t);
            }
            return types;
          }
          return type;
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_single() {
        var cacheKey = 'type_single@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var savedPos4 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result27 = parse_property();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result27 === null) {
          var result12 = '';
        } else {
          var result12 = null;
          pos = savedPos4;
        }
        if (result12 !== null) {
          var result26 = parse_string();
          if (result26 !== null) {
            var result13 = result26;
          } else {
            var result25 = parse_date();
            if (result25 !== null) {
              var result13 = result25;
            } else {
              var result24 = parse_number();
              if (result24 !== null) {
                var result13 = result24;
              } else {
                var result23 = parse_integer();
                if (result23 !== null) {
                  var result13 = result23;
                } else {
                  var result22 = parse_boolean();
                  if (result22 !== null) {
                    var result13 = result22;
                  } else {
                    var result21 = parse_null();
                    if (result21 !== null) {
                      var result13 = result21;
                    } else {
                      var result20 = parse_undefined();
                      if (result20 !== null) {
                        var result13 = result20;
                      } else {
                        var result19 = parse_anything();
                        if (result19 !== null) {
                          var result13 = result19;
                        } else {
                          var result18 = parse_ref_call();
                          if (result18 !== null) {
                            var result13 = result18;
                          } else {
                            var result13 = null;;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result13 !== null) {
            var result17 = parse_boolean_expression();
            var result14 = result17 !== null ? result17 : '';
            if (result14 !== null) {
              var result16 = parse_assignement();
              var result15 = result16 !== null ? result16 : '';
              if (result15 !== null) {
                var result10 = [result12, result13, result14, result15];
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        var result11 = result10 !== null
          ? (function(type, validation, assignement) {
            if (validation) {
            type.validation = validation;
          }
          type.assign = assignement || null;
          return type;
          })(result10[1], result10[2], result10[3])
          : null;
        if (result11 !== null) {
          var result9 = result11;
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result8 = parse_array();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var result7 = parse_object();
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result6 = parse_assignement();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(type, assignement) {
              type.assign = assignement || null;
            return type;
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ref_decl() {
        var cacheKey = 'ref_decl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AMPERSAND();
        if (result3 !== null) {
          var result4 = parse_string_simple();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) {
            return name;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ref_call() {
        var cacheKey = 'ref_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_STAR();
        if (result3 !== null) {
          var result4 = parse_string_simple();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) {
            return new TypeRefCall(name);
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignement() {
        var cacheKey = 'assignement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AS();
        if (result3 !== null) {
          var result4 = parse_variable();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {
            if (!v.name) {
            throw new Error("Can't assign to special variable $");
          }
          return v;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_top_level_assignement() {
        var cacheKey = 'top_level_assignement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = parse_SET();
        if (result11 !== null) {
          var result12 = parse_variable();
          if (result12 !== null) {
            var result13 = parse_AS();
            if (result13 !== null) {
              var result14 = parse_literal();
              if (result14 !== null) {
                var result9 = [result11, result12, result13, result14];
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(v, l) {
            return "";
          })(result9[1], result9[3])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_SET();
          if (result4 !== null) {
            var result5 = parse_ref_call();
            if (result5 !== null) {
              var result6 = parse_AS();
              if (result6 !== null) {
                var result7 = parse_type_choice();
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(r, t) {
              return "";
            })(result2[1], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_array() {
        var cacheKey = 'array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result8 = parse_boolean_expression();
        var result3 = result8 !== null ? result8 : '';
        if (result3 !== null) {
          var result4 = parse_LBRACKET();
          if (result4 !== null) {
            var result7 = parse_type();
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              var result6 = parse_RBRACKET();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(validation, type) {
            var arr;
          arr = new TypeArray(type);
          if (validation) {
            arr.validation = validation;
          }
          return arr;
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_object() {
        var cacheKey = 'object@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var savedPos2 = pos;
        var result13 = parse_boolean_expression();
        var result8 = result13 !== null ? result13 : '';
        if (result8 !== null) {
          var result9 = parse_LBRACE();
          if (result9 !== null) {
            var result10 = [];
            var result12 = parse_property();
            while (result12 !== null) {
              result10.push(result12);
              var result12 = parse_property();
            }
            if (result10 !== null) {
              var result11 = parse_RBRACE();
              if (result11 !== null) {
                var result6 = [result8, result9, result10, result11];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        var result7 = result6 !== null
          ? (function(validation, props) {
            var obj, o, _i, _ref, _len;
          obj = new TypeObject();
          for (_i = 0, _len = (_ref = props).length; _i < _len; ++_i) {
            o = _ref[_i];
            obj.addProperty(o);
          }
          if (validation) {
            obj.validation = validation;
          }
          return obj;
          })(result6[0], result6[2])
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          var result4 = parse_property();
          if (result4 !== null) {
            var result2 = [];
            while (result4 !== null) {
              result2.push(result4);
              var result4 = parse_property();
            }
          } else {
            var result2 = null;
          }
          var result3 = result2 !== null
            ? (function(props) {
              var obj, o, _i, _ref, _len;
            obj = new TypeObject();
            for (_i = 0, _len = (_ref = props).length; _i < _len; ++_i) {
              o = _ref[_i];
              obj.addProperty(o);
            }
            return obj;
            })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_property() {
        var cacheKey = 'property@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result18 = parse___();
        var result5 = result18 !== null ? result18 : '';
        if (result5 !== null) {
          var result6 = parse_string_literal();
          if (result6 !== null) {
            var result17 = parse___();
            var result7 = result17 !== null ? result17 : '';
            if (result7 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result8 = ":";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\":\"");
                }
              }
              if (result8 !== null) {
                var result9 = parse_type();
                if (result9 !== null) {
                  var savedPos2 = pos;
                  var savedPos3 = pos;
                  var savedPos4 = pos;
                  var savedReportMatchFailuresVar0 = reportMatchFailures;
                  reportMatchFailures = false;
                  var result16 = parse_property();
                  reportMatchFailures = savedReportMatchFailuresVar0;
                  if (result16 === null) {
                    var result14 = '';
                  } else {
                    var result14 = null;
                    pos = savedPos4;
                  }
                  if (result14 !== null) {
                    var result15 = parse_default();
                    if (result15 !== null) {
                      var result12 = [result14, result15];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  var result13 = result12 !== null
                    ? (function(def) { return def; })(result12[1])
                    : null;
                  if (result13 !== null) {
                    var result11 = result13;
                  } else {
                    var result11 = null;
                    pos = savedPos2;
                  }
                  var result10 = result11 !== null ? result11 : '';
                  if (result10 !== null) {
                    var result3 = [result5, result6, result7, result8, result9, result10];
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(name, type, def) {
            var prop;
          prop = new TypeProperty(name, type);
          if (def) {
            prop.setDefault(def);
          }
          return prop;
          })(result3[1], result3[4], result3[5])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_conditional_property();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conditional_property() {
        var cacheKey = 'conditional_property@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IF();
        if (result3 !== null) {
          var result4 = parse_boolean_expression();
          if (result4 !== null) {
            var result22 = parse_property();
            if (result22 !== null) {
              var result5 = [];
              while (result22 !== null) {
                result5.push(result22);
                var result22 = parse_property();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = [];
              var savedPos4 = pos;
              var savedPos5 = pos;
              var result18 = parse_ELIF();
              if (result18 !== null) {
                var result19 = parse_boolean_expression();
                if (result19 !== null) {
                  var result21 = parse_property();
                  if (result21 !== null) {
                    var result20 = [];
                    while (result21 !== null) {
                      result20.push(result21);
                      var result21 = parse_property();
                    }
                  } else {
                    var result20 = null;
                  }
                  if (result20 !== null) {
                    var result16 = [result18, result19, result20];
                  } else {
                    var result16 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos5;
                }
              } else {
                var result16 = null;
                pos = savedPos5;
              }
              var result17 = result16 !== null
                ? (function(cond, props) { return new CIf(cond, new TypePropertyList(props)); })(result16[1], result16[2])
                : null;
              if (result17 !== null) {
                var result15 = result17;
              } else {
                var result15 = null;
                pos = savedPos4;
              }
              while (result15 !== null) {
                result6.push(result15);
                var savedPos4 = pos;
                var savedPos5 = pos;
                var result18 = parse_ELIF();
                if (result18 !== null) {
                  var result19 = parse_boolean_expression();
                  if (result19 !== null) {
                    var result21 = parse_property();
                    if (result21 !== null) {
                      var result20 = [];
                      while (result21 !== null) {
                        result20.push(result21);
                        var result21 = parse_property();
                      }
                    } else {
                      var result20 = null;
                    }
                    if (result20 !== null) {
                      var result16 = [result18, result19, result20];
                    } else {
                      var result16 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos5;
                }
                var result17 = result16 !== null
                  ? (function(cond, props) { return new CIf(cond, new TypePropertyList(props)); })(result16[1], result16[2])
                  : null;
                if (result17 !== null) {
                  var result15 = result17;
                } else {
                  var result15 = null;
                  pos = savedPos4;
                }
              }
              if (result6 !== null) {
                var savedPos2 = pos;
                var savedPos3 = pos;
                var result12 = parse_ELSE();
                if (result12 !== null) {
                  var result14 = parse_property();
                  if (result14 !== null) {
                    var result13 = [];
                    while (result14 !== null) {
                      result13.push(result14);
                      var result14 = parse_property();
                    }
                  } else {
                    var result13 = null;
                  }
                  if (result13 !== null) {
                    var result10 = [result12, result13];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
                var result11 = result10 !== null
                  ? (function(props) { return props; })(result10[1])
                  : null;
                if (result11 !== null) {
                  var result9 = result11;
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_ENDIF();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(cond, props, elifs, else_part) {
            var cif, e, _i, _ref, _len;
          cif = new CIf(cond, new TypePropertyList(props));
          for (_i = 0, _len = (_ref = elifs).length; _i < _len; ++_i) {
            e = _ref[_i];
            cif.addElse(e);
          }
          if (else_part) {
            cif.addElse(new TypePropertyList(else_part));
          }
          return cif;
          })(result1[1], result1[2], result1[3], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_default() {
        var cacheKey = 'default@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse___();
        var result3 = result6 !== null ? result6 : '';
        if (result3 !== null) {
          if (input.substr(pos, 7) === "default") {
            var result4 = "default";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"default\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_literal();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lit) {
            return lit;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_null() {
        var cacheKey = 'null@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 4) === "null") {
            var result4 = "null";
            pos += 4;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"null\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeNull;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_undefined() {
        var cacheKey = 'undefined@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 9) === "undefined") {
            var result4 = "undefined";
            pos += 9;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"undefined\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeUndefined;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date() {
        var cacheKey = 'date@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 4) === "date") {
            var result4 = "date";
            pos += 4;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"date\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeDate;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string() {
        var cacheKey = 'string@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 6) === "string") {
            var result4 = "string";
            pos += 6;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"string\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeString;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 6) === "number") {
            var result4 = "number";
            pos += 6;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"number\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeNumber;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_integer() {
        var cacheKey = 'integer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result6 = parse___();
        var result3 = result6 !== null ? result6 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result4 = [];
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(number) {
            return number.join("");
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boolean() {
        var cacheKey = 'boolean@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 7) === "boolean") {
            var result4 = "boolean";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"boolean\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeBoolean;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anything() {
        var cacheKey = 'anything@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 8) === "anything") {
            var result4 = "anything";
            pos += 8;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"anything\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
            return new TypeAnything;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boolean_expression() {
        var cacheKey = 'boolean_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        var result13 = parse_expression();
        if (result13 !== null) {
          var result17 = parse_AND();
          if (result17 !== null) {
            var result14 = result17;
          } else {
            var result16 = parse_OR();
            if (result16 !== null) {
              var result14 = result16;
            } else {
              var result14 = null;;
            };
          }
          if (result14 !== null) {
            var result15 = parse_boolean_expression();
            if (result15 !== null) {
              var result11 = [result13, result14, result15];
            } else {
              var result11 = null;
              pos = savedPos4;
            }
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        var result12 = result11 !== null
          ? (function(l, op, r) {
            op.left = l;
          op.right = r;
          return op;
          })(result11[0], result11[1], result11[2])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          var result7 = parse_LPAREN();
          if (result7 !== null) {
            var result8 = parse_boolean_expression();
            if (result8 !== null) {
              var result9 = parse_RPAREN();
              if (result9 !== null) {
                var result5 = [result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(exp) {
              return exp;
            })(result5[1])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_expression();
            var result3 = result2 !== null
              ? (function(exp) {
                return exp;
              })(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_expression_op();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_literal();
          if (result4 !== null) {
            var result5 = parse_expression_op();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(left, op) {
              op.left = left;
            return op;
            })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression_op() {
        var cacheKey = 'expression_op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result30 = parse_IN();
        if (result30 !== null) {
          var result20 = result30;
        } else {
          var savedPos8 = pos;
          var savedPos9 = pos;
          var result28 = parse_NOT();
          if (result28 !== null) {
            var result29 = parse_IN();
            if (result29 !== null) {
              var result26 = [result28, result29];
            } else {
              var result26 = null;
              pos = savedPos9;
            }
          } else {
            var result26 = null;
            pos = savedPos9;
          }
          var result27 = result26 !== null
            ? (function(op) { op.negated = true; return op; })(result26[1])
            : null;
          if (result27 !== null) {
            var result25 = result27;
          } else {
            var result25 = null;
            pos = savedPos8;
          }
          if (result25 !== null) {
            var result20 = result25;
          } else {
            var result20 = null;;
          };
        }
        if (result20 !== null) {
          var result24 = parse_variable();
          if (result24 !== null) {
            var result21 = result24;
          } else {
            var result23 = parse_list();
            if (result23 !== null) {
              var result21 = result23;
            } else {
              var result22 = parse_function_call();
              if (result22 !== null) {
                var result21 = result22;
              } else {
                var result21 = null;;
              };
            };
          }
          if (result21 !== null) {
            var result18 = [result20, result21];
          } else {
            var result18 = null;
            pos = savedPos7;
          }
        } else {
          var result18 = null;
          pos = savedPos7;
        }
        var result19 = result18 !== null
          ? (function(op, container) {
            op.right = container;
          return op;
          })(result18[0], result18[1])
          : null;
        if (result19 !== null) {
          var result17 = result19;
        } else {
          var result17 = null;
          pos = savedPos6;
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result15 = parse_IS();
          if (result15 !== null) {
            var result16 = parse_NOT();
            if (result16 !== null) {
              var result13 = [result15, result16];
            } else {
              var result13 = null;
              pos = savedPos5;
            }
          } else {
            var result13 = null;
            pos = savedPos5;
          }
          var result14 = result13 !== null
            ? (function(op) { op.negated = true; return op; })(result13[0])
            : null;
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result12 = null;
            pos = savedPos4;
          }
          if (result12 !== null) {
            var result9 = result12;
          } else {
            var result11 = parse_IS();
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;;
            };
          }
          if (result9 !== null) {
            var result10 = parse_literal();
            if (result10 !== null) {
              var result7 = [result9, result10];
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          var result8 = result7 !== null
            ? (function(op, r) {
              op.right = r;
            return op;
            })(result7[0], result7[1])
            : null;
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_COMP_OP();
            if (result4 !== null) {
              var result5 = parse_literal();
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(op, r) {
                op.right = r;
              return op;
              })(result2[0], result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMP_OP() {
        var cacheKey = 'COMP_OP@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_LTE();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_GTE();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_LT();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_GT();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result13 = parse___();
        var result3 = result13 !== null ? result13 : '';
        if (result3 !== null) {
          var result12 = parse_lundefined();
          if (result12 !== null) {
            var result4 = result12;
          } else {
            var result11 = parse_lnull();
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var result10 = parse_function_call();
              if (result10 !== null) {
                var result4 = result10;
              } else {
                var result9 = parse_variable();
                if (result9 !== null) {
                  var result4 = result9;
                } else {
                  var result8 = parse_number_literal();
                  if (result8 !== null) {
                    var result4 = result8;
                  } else {
                    var result7 = parse_boolean_literal();
                    if (result7 !== null) {
                      var result4 = result7;
                    } else {
                      var result6 = parse_string_literal();
                      if (result6 !== null) {
                        var result4 = result6;
                      } else {
                        var result5 = parse_list();
                        if (result5 !== null) {
                          var result4 = result5;
                        } else {
                          var result4 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lit) {
            return lit;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_list() {
        var cacheKey = 'list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_LPAREN();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result7 = parse_literal();
          var result8 = result7 !== null
            ? (function(li) { return li; })(result7)
            : null;
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            var result4 = [];
            while (result6 !== null) {
              result4.push(result6);
              var savedPos2 = pos;
              var result7 = parse_literal();
              var result8 = result7 !== null
                ? (function(li) { return li; })(result7)
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = parse_RPAREN();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(lits) {
            return new LList(lits);
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_literal() {
        var cacheKey = 'string_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        if (input.substr(pos, 1) === "'") {
          var result16 = "'";
          pos += 1;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result16 !== null) {
          var result17 = [];
          if (input.substr(pos, 2) === "\\'") {
            var result21 = "\\'";
            pos += 2;
          } else {
            var result21 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\'\"");
            }
          }
          if (result21 !== null) {
            var result19 = result21;
          } else {
            if (input.substr(pos).match(/^[^']/) !== null) {
              var result20 = input.charAt(pos);
              pos++;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("[^']");
              }
            }
            if (result20 !== null) {
              var result19 = result20;
            } else {
              var result19 = null;;
            };
          }
          while (result19 !== null) {
            result17.push(result19);
            if (input.substr(pos, 2) === "\\'") {
              var result21 = "\\'";
              pos += 2;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\'\"");
              }
            }
            if (result21 !== null) {
              var result19 = result21;
            } else {
              if (input.substr(pos).match(/^[^']/) !== null) {
                var result20 = input.charAt(pos);
                pos++;
              } else {
                var result20 = null;
                if (reportMatchFailures) {
                  matchFailed("[^']");
                }
              }
              if (result20 !== null) {
                var result19 = result20;
              } else {
                var result19 = null;;
              };
            }
          }
          if (result17 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result18 = "'";
              pos += 1;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result18 !== null) {
              var result14 = [result16, result17, result18];
            } else {
              var result14 = null;
              pos = savedPos4;
            }
          } else {
            var result14 = null;
            pos = savedPos4;
          }
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        var result15 = result14 !== null
          ? (function(str) {
            return new LString(str.join(""));
          })(result14[1])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos3;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "\"") {
            var result7 = "\"";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result7 !== null) {
            var result8 = [];
            if (input.substr(pos, 2) === "\\\"") {
              var result12 = "\\\"";
              pos += 2;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result12 !== null) {
              var result10 = result12;
            } else {
              if (input.substr(pos).match(/^[^"]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\"]");
                }
              }
              if (result11 !== null) {
                var result10 = result11;
              } else {
                var result10 = null;;
              };
            }
            while (result10 !== null) {
              result8.push(result10);
              if (input.substr(pos, 2) === "\\\"") {
                var result12 = "\\\"";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\\\\\"\"");
                }
              }
              if (result12 !== null) {
                var result10 = result12;
              } else {
                if (input.substr(pos).match(/^[^"]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^\"]");
                  }
                }
                if (result11 !== null) {
                  var result10 = result11;
                } else {
                  var result10 = null;;
                };
              }
            }
            if (result8 !== null) {
              if (input.substr(pos, 1) === "\"") {
                var result9 = "\"";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result9 !== null) {
                var result5 = [result7, result8, result9];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result6 = result5 !== null
            ? (function(str) {
              return new LString(str.join(""));
            })(result5[1])
            : null;
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var savedPos0 = pos;
            var result2 = parse_string_simple();
            var result3 = result2 !== null
              ? (function(str) {
                return new LString(str);
              })(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_boolean_literal() {
        var cacheKey = 'boolean_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result5 = parse_TRUE();
        var result6 = result5 !== null
          ? (function() {
            return new LBoolean(true);
          })()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_FALSE();
          var result3 = result2 !== null
            ? (function() {
              return new LBoolean(false);
            })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_call() {
        var cacheKey = 'function_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_string_regular();
        if (result9 !== null) {
          var result10 = parse_LPAREN();
          if (result10 !== null) {
            var result11 = parse_variable();
            if (result11 !== null) {
              var result12 = parse_RPAREN();
              if (result12 !== null) {
                var result7 = [result9, result10, result11, result12];
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(name) {
            return new LFunCall(name.str, [new LVariable("")]);
          })(result7[0])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_string_regular();
          if (result4 !== null) {
            var result5 = parse_EXCLAMATION();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(name) {
              return new LFunCall(name.str, [new LVariable("")]);
            })(result2[0])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_simple() {
        var cacheKey = 'string_simple@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result7 = parse___();
        var result3 = result7 !== null ? result7 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[^:	+\n()$ ]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[^:	+\\n()$ ]");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            if (input.substr(pos).match(/^[^:	+\n) ]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^:	+\\n) ]");
              }
            }
            while (result6 !== null) {
              result5.push(result6);
              if (input.substr(pos).match(/^[^:	+\n) ]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[^:	+\\n) ]");
                }
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(f, s) {
            var str;
          str = f + s.join("");
          return str;
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_safe_identifier() {
        var cacheKey = 'safe_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_$]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_$]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z_0-9$]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_0-9$]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z_0-9$]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9$]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str, str2) {
            return str + str2.join("");
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_variable() {
        var cacheKey = 'variable@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_DOLLAR();
        if (result3 !== null) {
          var result5 = parse_safe_identifier();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str) {
            return new LVariable(str);
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string_regular() {
        var cacheKey = 'string_regular@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result7 = parse___();
        var result3 = result7 !== null ? result7 : '';
        if (result3 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z_]");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z_0-9]");
              }
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                if (input.substr(pos).match(/^[a-zA-Z_0-9]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z_0-9]");
                  }
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(f, s) {
            var str;
          str = f + s.join("");
          return new LString(str);
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number_literal() {
        var cacheKey = 'number_literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result11 = input.charAt(pos);
          pos++;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result11 !== null) {
          var result3 = [];
          while (result11 !== null) {
            result3.push(result11);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result3 = null;
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result10 !== null) {
              var result9 = [];
              while (result10 !== null) {
                result9.push(result10);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result6 = [result8, result9];
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(e) { return '.' + e.join(""); })(result6[1])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(n, comma) {
            var n;
          n = n.join("") + comma;
          return new LNumber(n);
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lnull() {
        var cacheKey = 'lnull@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "null") {
          var result1 = "null";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"null\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return new LNull;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lundefined() {
        var cacheKey = 'lundefined@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 9) === "undefined") {
          var result1 = "undefined";
          pos += 9;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"undefined\"");
          }
        }
        var result2 = result1 !== null
          ? (function() {
            return new LUndefined;
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result12 = parse_whitespace();
        var result7 = result12 !== null ? result12 : '';
        if (result7 !== null) {
          if (input.substr(pos, 1) === "#") {
            var result8 = "#";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"#\"");
            }
          }
          if (result8 !== null) {
            var result9 = [];
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
            while (result11 !== null) {
              result9.push(result11);
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result9 !== null) {
              if (input.substr(pos, 1) === "\n") {
                var result10 = "\n";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\n\"");
                }
              }
              if (result10 !== null) {
                var result6 = [result7, result8, result9, result10];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_whitespace();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            if (input.substr(pos, 1) === "\n") {
              var result4 = "\n";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\n\"");
              }
            }
            if (result4 !== null) {
              var result3 = result4;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var savedPos1 = pos;
            var result12 = parse_whitespace();
            var result7 = result12 !== null ? result12 : '';
            if (result7 !== null) {
              if (input.substr(pos, 1) === "#") {
                var result8 = "#";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"#\"");
                }
              }
              if (result8 !== null) {
                var result9 = [];
                if (input.substr(pos).match(/^[^\n]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^\\n]");
                  }
                }
                while (result11 !== null) {
                  result9.push(result11);
                  if (input.substr(pos).match(/^[^\n]/) !== null) {
                    var result11 = input.charAt(pos);
                    pos++;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("[^\\n]");
                    }
                  }
                }
                if (result9 !== null) {
                  if (input.substr(pos, 1) === "\n") {
                    var result10 = "\n";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"\\n\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = [result7, result8, result9, result10];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_whitespace();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "\n") {
                  var result4 = "\n";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\n\"");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function() {
            return "";
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result3 = " ";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        if (result3 !== null) {
          var result1 = result3;
        } else {
          if (input.substr(pos, 1) === "	") {
            var result2 = "	";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"	\"");
            }
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos, 1) === " ") {
              var result3 = " ";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\" \"");
              }
            }
            if (result3 !== null) {
              var result1 = result3;
            } else {
              if (input.substr(pos, 1) === "	") {
                var result2 = "	";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"	\"");
                }
              }
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AMPERSAND() {
        var cacheKey = 'AMPERSAND@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "&") {
            var result2 = "&";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"&\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LBRACKET() {
        var cacheKey = 'LBRACKET@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result2 = "[";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RBRACKET() {
        var cacheKey = 'RBRACKET@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "]") {
            var result2 = "]";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LBRACE() {
        var cacheKey = 'LBRACE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result2 = "{";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RBRACE() {
        var cacheKey = 'RBRACE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "}") {
            var result2 = "}";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"}\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STAR() {
        var cacheKey = 'STAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "*") {
            var result2 = "*";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"*\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PLUS() {
        var cacheKey = 'PLUS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "+") {
            var result2 = "+";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMA() {
        var cacheKey = 'COMMA@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result2 = ",";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LPAREN() {
        var cacheKey = 'LPAREN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RPAREN() {
        var cacheKey = 'RPAREN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ")") {
            var result2 = ")";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\")\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AROBAS() {
        var cacheKey = 'AROBAS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "@") {
            var result2 = "@";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"@\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOLLAR() {
        var cacheKey = 'DOLLAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "$") {
            var result2 = "$";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PIPE() {
        var cacheKey = 'PIPE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "|") {
            var result2 = "|";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXCLAMATION() {
        var cacheKey = 'EXCLAMATION@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "!") {
            var result2 = "!";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"!\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SHARP() {
        var cacheKey = 'SHARP@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "#") {
            var result2 = "#";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"#\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INCLUDE() {
        var cacheKey = 'INCLUDE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 7) === "include") {
            var result2 = "include";
            pos += 7;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"include\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SET() {
        var cacheKey = 'SET@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 3) === "set") {
            var result2 = "set";
            pos += 3;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"set\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IF() {
        var cacheKey = 'IF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 2) === "if") {
            var result2 = "if";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"if\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ELIF() {
        var cacheKey = 'ELIF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 4) === "elif") {
            var result2 = "elif";
            pos += 4;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"elif\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ELSE() {
        var cacheKey = 'ELSE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 4) === "else") {
            var result2 = "else";
            pos += 4;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"else\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ENDIF() {
        var cacheKey = 'ENDIF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 5) === "endif") {
            var result2 = "endif";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"endif\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AS() {
        var cacheKey = 'AS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 2) === "as") {
            var result2 = "as";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"as\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IN() {
        var cacheKey = 'IN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 2) === "in") {
            var result4 = "in";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"in\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return BinaryOperator["in"](); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NOT() {
        var cacheKey = 'NOT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse___();
        var result1 = result3 !== null ? result3 : '';
        if (result1 !== null) {
          if (input.substr(pos, 3) === "not") {
            var result2 = "not";
            pos += 3;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"not\"");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IS() {
        var cacheKey = 'IS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 2) === "is") {
            var result4 = "is";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"is\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return BinaryOperator.is(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MATCHES() {
        var cacheKey = 'MATCHES@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 7) === "matches") {
            var result4 = "matches";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"matches\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return BinaryOperator.matches(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GT() {
        var cacheKey = 'GT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === ">") {
            var result4 = ">";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\">\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o) { return BinaryOperator.gt(); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LT() {
        var cacheKey = 'LT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === "<") {
            var result4 = "<";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"<\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o) { return new BinaryOperator.lt(); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LTE() {
        var cacheKey = 'LTE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 2) === "<=") {
            var result4 = "<=";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"<=\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o) { return new BinaryOperator.lte(); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GTE() {
        var cacheKey = 'GTE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 2) === ">=") {
            var result4 = ">=";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\">=\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(o) { return new BinaryOperator.gte(); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TRUE() {
        var cacheKey = 'TRUE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 4) === "true") {
            var result4 = "true";
            pos += 4;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"true\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new Boolean(true); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FALSE() {
        var cacheKey = 'FALSE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 5) === "false") {
            var result4 = "false";
            pos += 5;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new Boolean(false); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AND() {
        var cacheKey = 'AND@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 3) === "and") {
            var result4 = "and";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"and\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new BinaryOperator.and(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OR() {
        var cacheKey = 'OR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse___();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 2) === "or") {
            var result4 = "or";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"or\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new BinaryOperator.or(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var TypeString, TypeAnything, TypeNumber, TypeBoolean, TypeDate, TypeInteger, TypeObject, TypeArray, ArrayRange, TypeProperty, TypePropertyList, TypeChoice, TypeRef, TypeRefCall, TypeNull, TypeUndefined, BinaryOperator, CIf, LString, LNumber, LList, LVariable, LBoolean, LFunCall, LNull, LUndefined, _ref;
      
  _ref = require('./ast'), TypeString = _ref.TypeString, TypeAnything = _ref.TypeAnything, TypeNumber = _ref.TypeNumber, TypeBoolean = _ref.TypeBoolean, TypeDate = _ref.TypeDate, TypeInteger = _ref.TypeInteger, TypeObject = _ref.TypeObject, TypeArray = _ref.TypeArray, ArrayRange = _ref.ArrayRange, TypeProperty = _ref.TypeProperty, TypePropertyList = _ref.TypePropertyList, TypeChoice = _ref.TypeChoice, TypeRef = _ref.TypeRef, TypeRefCall = _ref.TypeRefCall, TypeNull = _ref.TypeNull, TypeUndefined = _ref.TypeUndefined, BinaryOperator = _ref.BinaryOperator, CIf = _ref.CIf, LString = _ref.LString, LNumber = _ref.LNumber, LList = _ref.LList, LVariable = _ref.LVariable, LBoolean = _ref.LBoolean, LFunCall = _ref.LFunCall, LNull = _ref.LNull, LUndefined = _ref.LUndefined;
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        console.log(errorPosition);
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})(); var _parse = module.exports.parse; module.exports.parse = function (input, startRule, options) {if (startRule instanceof Object) { options = startRule; startRule = undefined; }return _parse (input, startRule, options);};