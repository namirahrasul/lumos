/**
 *  Validatr in javascript
 */
var Context, Default, Validator, SimpleValidator, TDate, TBoolean, TNumber, TString, TUndefined, TNull, TProperties, TProperty, TObject, TArray, TChoice, TIf, __indexOf;
__indexOf = [].indexOf || (function(){
  function __indexOf(x){
    var i, l;
    i = -1;
    l = this.length;
    while (++i < l) {
      if (this.hasOwnProperty(i) && this[i] === x) {
        return i;
      }
    }
    return -1;
  }
  return __indexOf;
}());
function __in(k, arr){
  return __indexOf.call(arr, k);
}
function pathjoin(path1, path2){
  var arr;
  arr = [];
  if (path1) {
    arr.push(path1);
  }
  if (path2) {
    arr.push(path2);
  }
  return arr.join(".");
}
/**
 *
 */
Context = (function(){
  Context.displayName = 'Context';
  var prototype = Context.prototype, constructor = Context;
  function Context(){
    this.errors = [];
    this.displayErrors = true;
    this.vars = {};
  }
  prototype.appendError = (function(){
    function appendError(path, msg){
      if (this.displayErrors) {
        return this.errors.push([path, msg]);
      }
    }
    return appendError;
  }());
  return Context;
}());
Default = (function(){
  Default.displayName = 'Default';
  var prototype = Default.prototype, constructor = Default;
  function _ctor(){} _ctor.prototype = prototype;
  function Default(value){
    var _this = new _ctor;
    _this.value = value;
    return _this;
  }
  return Default;
}());
/**
 *
 */
Validator = (function(){
  Validator.displayName = 'Validator';
  var prototype = Validator.prototype, constructor = Validator;
  function Validator(){
    this.assign = null;
    this.validation = null;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var res;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      if (this.assign != null) {
        ctx.vars[this.assign] = node;
      }
      if (this.validation) {
        res = this.validation(node, ctx);
        if (!res) {
          ctx.appendError(path, "validation not passed");
        }
        return res;
      }
      return true;
    }
    return validate;
  }());
  prototype.parseArgs = (function(){
    function parseArgs(args){
      var ar, a, _i, _len;
      ar = [];
      for (_i = 0, _len = args.length; _i < _len; ++_i) {
        a = args[_i];
        if (a instanceof Function) {
          this.validation = a;
          continue;
        }
        if (typeof a === 'string') {
          this.assign = a;
          continue;
        }
        if (a instanceof Default) {
          this['default'] = a['value'];
        }
        ar.push(a);
      }
      return ar;
    }
    return parseArgs;
  }());
  return Validator;
}());
/**
 *
 */
SimpleValidator = (function(_super){
  SimpleValidator.displayName = 'SimpleValidator';
  var prototype = __extends(SimpleValidator, _super).prototype, constructor = SimpleValidator;
  function SimpleValidator(){
    if (this.parseArgs(arguments).length !== 0) {
      throw new Error("Useless parameters in constructor");
    }
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var res;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      res = this._validate(node);
      if (!res) {
        ctx.appendError(path, "Not the correct type");
      }
      return res && SimpleValidator.superclass.prototype.validate.call(this, node, ctx, path);
    }
    return validate;
  }());
  /**
   *  This is meant to be redefined.
   */
  prototype._validate = (function(){
    function _validate(node){
      throw new Error("Not Implemented");
    }
    return _validate;
  }());
  return SimpleValidator;
}(Validator));
/**
 *
 */
TDate = (function(_super){
  TDate.displayName = 'TDate';
  var prototype = __extends(TDate, _super).prototype, constructor = TDate;
  function _ctor(){} _ctor.prototype = prototype;
  function TDate(){
    var _this = new _ctor;
    TDate.superclass.apply(_this, arguments);
    return _this;
  }
  return TDate;
}(SimpleValidator));
/**
 *
 */
TBoolean = (function(_super){
  TBoolean.displayName = 'TBoolean';
  var prototype = __extends(TBoolean, _super).prototype, constructor = TBoolean;
  function _ctor(){} _ctor.prototype = prototype;
  function TBoolean(){
    var _this = new _ctor;
    TBoolean.superclass.apply(_this, arguments);
    return _this;
  }
  prototype._validate = (function(){
    function _validate(node){
      return node === true || node === false;
    }
    return _validate;
  }());
  return TBoolean;
}(SimpleValidator));
/**
 *
 */
TNumber = (function(_super){
  TNumber.displayName = 'TNumber';
  var prototype = __extends(TNumber, _super).prototype, constructor = TNumber;
  function _ctor(){} _ctor.prototype = prototype;
  function TNumber(){
    var _this = new _ctor;
    TNumber.superclass.apply(_this, arguments);
    return _this;
  }
  prototype._validate = (function(){
    function _validate(node){
      return node instanceof Number || typeof node === 'number';
    }
    return _validate;
  }());
  return TNumber;
}(SimpleValidator));
/**
 *
 */
TString = (function(_super){
  TString.displayName = 'TString';
  var prototype = __extends(TString, _super).prototype, constructor = TString;
  function _ctor(){} _ctor.prototype = prototype;
  function TString(){
    var _this = new _ctor;
    TString.superclass.apply(_this, arguments);
    return _this;
  }
  prototype._validate = (function(){
    function _validate(node){
      return node instanceof String || typeof node === 'string';
    }
    return _validate;
  }());
  return TString;
}(SimpleValidator));
/**
 *
 */
TUndefined = (function(_super){
  TUndefined.displayName = 'TUndefined';
  var prototype = __extends(TUndefined, _super).prototype, constructor = TUndefined;
  function _ctor(){} _ctor.prototype = prototype;
  function TUndefined(){
    var _this = new _ctor;
    TUndefined.superclass.apply(_this, arguments);
    return _this;
  }
  prototype._validate = (function(){
    function _validate(node){
      return node === undefined;
    }
    return _validate;
  }());
  return TUndefined;
}(SimpleValidator));
TNull = (function(_super){
  TNull.displayName = 'TNull';
  var prototype = __extends(TNull, _super).prototype, constructor = TNull;
  function _ctor(){} _ctor.prototype = prototype;
  function TNull(){
    var _this = new _ctor;
    TNull.superclass.apply(_this, arguments);
    return _this;
  }
  prototype._validate = (function(){
    function _validate(node){
      return node === null;
    }
    return _validate;
  }());
  return TNull;
}(SimpleValidator));
/**
 *
 */
TProperties = (function(_super){
  TProperties.displayName = 'TProperties';
  var prototype = __extends(TProperties, _super).prototype, constructor = TProperties;
  function _ctor(){} _ctor.prototype = prototype;
  function TProperties(){
    var _this = new _ctor;
    _this.properties = arguments;
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var res, p, _i, _ref, _len;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      res = true;
      for (_i = 0, _len = (_ref = this.properties).length; _i < _len; ++_i) {
        p = _ref[_i];
        res = p.validate(node, ctx, path) && res;
      }
      return res;
    }
    return validate;
  }());
  return TProperties;
}(Validator));
/**
 *
 */
TProperty = (function(_super){
  TProperty.displayName = 'TProperty';
  var prototype = __extends(TProperty, _super).prototype, constructor = TProperty;
  function _ctor(){} _ctor.prototype = prototype;
  function TProperty(name, type){
    var _this = new _ctor;
    _this.name = name;
    _this.type = type;
    _this.parseArgs(arguments);
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var prop;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      path = pathjoin(path, this.name);
      prop = node[this.name];
      if (prop === undefined && 'default' in this) {
        prop = node[this.name] = this['default'];
      }
      return this.type.validate(prop, ctx, path) && TProperty.superclass.prototype.validate.call(this, prop, ctx, path);
    }
    return validate;
  }());
  return TProperty;
}(Validator));
/**
 *
 */
TObject = (function(_super){
  TObject.displayName = 'TObject';
  var prototype = __extends(TObject, _super).prototype, constructor = TObject;
  function _ctor(){} _ctor.prototype = prototype;
  function TObject(){
    var _this = new _ctor;
    _this.properties = _this.parseArgs(arguments);
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var res, o, _i, _ref, _len;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      if (typeof node !== 'object' || node instanceof Array || node === null) {
        ctx.appendError(path, "not an object");
        return false;
      }
      res = true;
      for (_i = 0, _len = (_ref = this.properties).length; _i < _len; ++_i) {
        o = _ref[_i];
        res = o.validate(node, ctx, path) && res;
      }
      return TObject.superclass.prototype.validate.call(this, node, ctx, path) && res;
    }
    return validate;
  }());
  return TObject;
}(Validator));
/**
 *
 */
TArray = (function(_super){
  TArray.displayName = 'TArray';
  var prototype = __extends(TArray, _super).prototype, constructor = TArray;
  function _ctor(){} _ctor.prototype = prototype;
  function TArray(type){
    var res, _this = new _ctor;
    _this.type = type;
    res = _this.parseArgs(arguments);
    if (res.length > 1) {
      throw new Error("Too many arguments");
    }
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var res, idx, o, _len;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      if (!(node instanceof Array)) {
        ctx.appendError(path, "Not an array");
        return false;
      }
      res = true;
      if (this.type) {
        for (idx = 0, _len = node.length; idx < _len; ++idx) {
          o = node[idx];
          res = this.type.validate(o, ctx, pathjoin(path, idx.toString())) && res;
        }
      }
      return TArray.superclass.prototype.validate.call(this, node, ctx, path) && res;
    }
    return validate;
  }());
  return TArray;
}(Validator));
/**
 *
 */
TChoice = (function(_super){
  TChoice.displayName = 'TChoice';
  var prototype = __extends(TChoice, _super).prototype, constructor = TChoice;
  function _ctor(){} _ctor.prototype = prototype;
  function TChoice(){
    var _this = new _ctor;
    _this.choices = _this.parseArgs(arguments);
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      var found_one, c, _i, _ref, _len;
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      ctx.displayErrors = false;
      found_one = false;
      for (_i = 0, _len = (_ref = this.choices).length; _i < _len; ++_i) {
        c = _ref[_i];
        if (found_one) {
          break;
        }
        found_one = c.validate(node, ctx, path);
      }
      ctx.displayErrors = true;
      return TChoice.superclass.prototype.validate.call(this, node, ctx, path) && found_one;
    }
    return validate;
  }());
  return TChoice;
}(Validator));
/**
 *
 */
TIf = (function(_super){
  TIf.displayName = 'TIf';
  var prototype = __extends(TIf, _super).prototype, constructor = TIf;
  function _ctor(){} _ctor.prototype = prototype;
  function TIf(cond, then, otherwise){
    var _this = new _ctor;
    _this.cond = cond;
    _this.then = then;
    _this.otherwise = otherwise != null ? otherwise : null;
    return _this;
  }
  prototype.validate = (function(){
    function validate(node, ctx, path){
      ctx == null && (ctx = new Context);
      path == null && (path = '');
      if (this.cond(node, ctx)) {
        return this.then.validate(node, ctx, path);
      } else {
        if (this.otherwise) {
          return this.otherwise.validate(node, ctx, path);
        }
      }
      return true;
    }
    return validate;
  }());
  return TIf;
}(Validator));
function __extends(sub, sup){
  function ctor(){} ctor.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new ctor).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}