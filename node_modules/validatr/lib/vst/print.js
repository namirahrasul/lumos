var Visitor;
Visitor = require('./base').Visitor;
function simpleType(name, node){
  var s;
  s = [name];
  if (node.validation) {
    s.push(this.visit(node.validation));
  }
  return s.join(" ");
}
exports.printVisitor = new Visitor({
  /**
   *
   */
  TypeChoice: (function(){
    function TypeChoice(node){
      var s, c, _i, _ref, _len;
      s = [];
      for (_i = 0, _len = (_ref = node.types).length; _i < _len; ++_i) {
        c = _ref[_i];
        s.push(this.visit(c));
      }
      return s.join(" | ");
    }
    return TypeChoice;
  }())
  /**
   *
   */,
  TypeObject: (function(){
    function TypeObject(node){
      var s;
      s = [];
      if (node.validation) {
        s.push(this.visit(node.validation));
      }
      s.push("{");
      s.push(this.visit(node.properties));
      s.push("}");
      return s.join(" ");
    }
    return TypeObject;
  }())
  /**
   *
   */,
  TypeArray: (function(){
    function TypeArray(node){
      var s;
      s = [];
      if (node.validation) {
        s.push(this.visit(node.validation));
      }
      s.push("[");
      s.push(this.visit(node.inner_type));
      s.push("]");
      return s.join(" ");
    }
    return TypeArray;
  }()),
  TypePropertyList: (function(){
    function TypePropertyList(node){
      var s, p, _i, _ref, _len;
      s = [];
      for (_i = 0, _len = (_ref = node.list).length; _i < _len; ++_i) {
        p = _ref[_i];
        s.push(this.visit(p));
      }
      return s.join(" ");
    }
    return TypePropertyList;
  }())
  /**
   *
   */,
  TypeProperty: (function(){
    function TypeProperty(node){
      var s;
      s = [this.visit(node.name) + ":"];
      s.push(this.visit(node.inner_type));
      if (node['default']) {
        s.push("default " + this.visit(node['default']));
      }
      return s.join(" ");
    }
    return TypeProperty;
  }()),
  TypeRef: (function(){
    function TypeRef(node){
      return ("&" + node.name + " ") + this.visit(node.type);
    }
    return TypeRef;
  }()),
  TypeRefCall: (function(){
    function TypeRefCall(node){
      return "*" + node.name;
    }
    return TypeRefCall;
  }()),
  TypeString: (function(){
    function TypeString(node){
      return simpleType.call(this, 'string', node);
    }
    return TypeString;
  }()),
  TypeNumber: (function(){
    function TypeNumber(node){
      return simpleType.call(this, 'number', node);
    }
    return TypeNumber;
  }()),
  TypeDate: (function(){
    function TypeDate(node){
      return simpleType.call(this, 'date', node);
    }
    return TypeDate;
  }()),
  TypeBoolean: (function(){
    function TypeBoolean(node){
      return simpleType.call(this, 'boolean', node);
    }
    return TypeBoolean;
  }()),
  TypeNull: (function(){
    function TypeNull(node){
      return simpleType.call(this, 'null', node);
    }
    return TypeNull;
  }()),
  TypeAnything: (function(){
    function TypeAnything(node){
      return simpleType.call(this, 'anything', node);
    }
    return TypeAnything;
  }()),
  TypeUndefined: (function(){
    function TypeUndefined(node){
      return simpleType.call(this, 'undefined', node);
    }
    return TypeUndefined;
  }()),
  BinaryOperator: (function(){
    function BinaryOperator(node){
      var s;
      s = [];
      s.push(this.visit(node.left));
      if (node.negated) {
        s.push(node.not_op);
      } else {
        s.push(node.op);
      }
      s.push(this.visit(node.right));
      return s.join(" ");
    }
    return BinaryOperator;
  }()),
  LString: (function(){
    function LString(node){
      return "\"" + node.str + "\"";
    }
    return LString;
  }()),
  LVariable: (function(){
    function LVariable(node){
      return "$" + node.name;
    }
    return LVariable;
  }()),
  LNumber: (function(){
    function LNumber(node){
      return node.num + "";
    }
    return LNumber;
  }()),
  LFunCall: (function(){
    function LFunCall(node){
      var args, a, _i, _ref, _len;
      args = [];
      for (_i = 0, _len = (_ref = node.args).length; _i < _len; ++_i) {
        a = _ref[_i];
        args.push(this.visit(a));
      }
      return node.name + "(" + args.join(", ") + ")";
    }
    return LFunCall;
  }()),
  LList: (function(){
    function LList(node){
      var s, i, _i, _ref, _len;
      s = [];
      for (_i = 0, _len = (_ref = node.list).length; _i < _len; ++_i) {
        i = _ref[_i];
        s.push(this.visit(i));
      }
      return "(" + s.join(" ") + ")";
    }
    return LList;
  }()),
  LBoolean: (function(){
    function LBoolean(node){
      return node.value ? 'true' : 'false';
    }
    return LBoolean;
  }()),
  LUndefined: (function(){
    function LUndefined(node){
      return "undefined";
    }
    return LUndefined;
  }()),
  LNull: (function(){
    function LNull(node){
      return "null";
    }
    return LNull;
  }()),
  CIf: (function(){
    function CIf(node){
      var s;
      s = [];
      s.push('if');
      s.push(this.visit(node.cond));
      s.push(this.visit(node.then));
      if (node.otherwise) {
        s.push('else');
        s.push(this.visit(node.otherwise));
      }
      s.push('endif');
      return s.join(" ");
    }
    return CIf;
  }())
});