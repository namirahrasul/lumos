#!/usr/bin/env node
var optimist, argv, fs, util, grammar, printVisitor, pythonVisitor, javascriptVisitor, file, data, _ref, _i, _len;
optimist = require("optimist").usage("Transform a validatr formatted file or stdin\nUsage: $0 [options] file\n       $0 [options]").options('help', {
  alias: 'h',
  describe: "Show this help",
  boolean: true
}).options('python', {
  alias: 'y',
  describe: "Compile to Python",
  boolean: true
}).options('javascript', {
  alias: 'j',
  describe: "Compile to Javascript",
  boolean: true
});
argv = optimist.argv;
fs = require("fs");
util = require("util");
grammar = require("./grammar");
_ref = require("./vst"), printVisitor = _ref.printVisitor, pythonVisitor = _ref.pythonVisitor, javascriptVisitor = _ref.javascriptVisitor;
function parse(data){
  var res;
  try {
    res = grammar.parse(data);
    if (argv.python) {
      return pythonVisitor.visit(res) + '\n';
    } else if (argv.javascript) {
      return javascriptVisitor.visit(res) + '\n';
    } else {
      return printVisitor.visit(res) + '\n';
    }
  } catch (e) {
    console.log(e.stack);
    console.log(e.message + "");
    return "";
  }
}
if (argv.help) {
  console.log(optimist.help());
  process.exit(0);
}
if (argv._.length >= 1) {
  for (_i = 0, _len = (_ref = argv._).length; _i < _len; ++_i) {
    file = _ref[_i];
    fs.readFile(file, 'utf-8', _fn);
  }
} else {
  process.stdin.resume();
  process.stdin.setEncoding("utf-8");
  data = "";
  process.stdin.on("data", function(chunk){
    return data += chunk;
  });
  process.stdin.on("end", function(){
    return util.print(parse(data));
  });
}
function _fn(err, data){
  var res;
  if (err) {
    return console.warn(err.message);
  } else {
    res = parse(data);
    return util.print(res);
  }
}