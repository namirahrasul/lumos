/**
 *
 */
var Type, TypeChoice, TypeProperty, TypePropertyList, TypeArray, TypeObject, TypeString, TypeNumber, TypeBoolean, TypeAnything, TypeInteger, TypeDate, TypeNull, TypeUndefined, TypeRef, TypeRefCall;
Type = (function(){
  Type.displayName = 'Type';
  var ids, prototype = Type.prototype, constructor = Type;
  ids = 0;
  function Type(typename){
    this.typename = typename != null ? typename : "type";
    ids = ids + 1;
    this.typename += ids;
    this.validation = null;
    this.assign = null;
  }
  return Type;
}());
TypeChoice = (function(_super){
  TypeChoice.displayName = 'TypeChoice';
  var prototype = __extends(TypeChoice, _super).prototype, constructor = TypeChoice;
  function TypeChoice(types){
    this.types = types != null
      ? types
      : [];
    TypeChoice.superclass.call(this, "choice");
  }
  prototype.addType = (function(){
    function addType(type){
      return this.types.push(type);
    }
    return addType;
  }());
  return TypeChoice;
}(Type));
TypeProperty = (function(_super){
  TypeProperty.displayName = 'TypeProperty';
  var prototype = __extends(TypeProperty, _super).prototype, constructor = TypeProperty;
  function TypeProperty(name, inner_type){
    this.name = name;
    this.inner_type = inner_type;
    TypeProperty.superclass.call(this, "property");
    this['default'] = null;
  }
  prototype.setDefault = (function(){
    function setDefault(literal){
      return this['default'] = literal;
    }
    return setDefault;
  }());
  return TypeProperty;
}(Type));
TypePropertyList = (function(_super){
  TypePropertyList.displayName = 'TypePropertyList';
  var prototype = __extends(TypePropertyList, _super).prototype, constructor = TypePropertyList;
  function TypePropertyList(list){
    this.list = list != null
      ? list
      : [];
    TypePropertyList.superclass.call(this, "proplist");
  }
  prototype.push = (function(){
    function push(elt){
      return this.list.push(elt);
    }
    return push;
  }());
  return TypePropertyList;
}(Type));
/**
 *
 */
TypeArray = (function(_super){
  TypeArray.displayName = 'TypeArray';
  var prototype = __extends(TypeArray, _super).prototype, constructor = TypeArray;
  function TypeArray(inner_type){
    this.inner_type = inner_type;
    TypeArray.superclass.call(this, "array");
    if (!this.inner_type) {
      this.inner_type = new TypeAnything();
    }
  }
  return TypeArray;
}(Type));
/**
 *  The Object class
 */
TypeObject = (function(_super){
  TypeObject.displayName = 'TypeObject';
  var prototype = __extends(TypeObject, _super).prototype, constructor = TypeObject;
  function TypeObject(){
    TypeObject.superclass.call(this, "object");
    this.properties = new TypePropertyList;
  }
  prototype.addProperty = (function(){
    function addProperty(prop){
      return this.properties.push(prop);
    }
    return addProperty;
  }());
  return TypeObject;
}(Type));
TypeString = (function(_super){
  TypeString.displayName = 'TypeString';
  var prototype = __extends(TypeString, _super).prototype, constructor = TypeString;
  function TypeString(){
    TypeString.superclass.call(this, "string");
  }
  return TypeString;
}(Type));
TypeNumber = (function(_super){
  TypeNumber.displayName = 'TypeNumber';
  var prototype = __extends(TypeNumber, _super).prototype, constructor = TypeNumber;
  function TypeNumber(){
    TypeNumber.superclass.call(this, "number");
  }
  return TypeNumber;
}(Type));
TypeBoolean = (function(_super){
  TypeBoolean.displayName = 'TypeBoolean';
  var prototype = __extends(TypeBoolean, _super).prototype, constructor = TypeBoolean;
  function TypeBoolean(){
    TypeBoolean.superclass.call(this, "boolean");
  }
  return TypeBoolean;
}(Type));
TypeAnything = (function(_super){
  TypeAnything.displayName = 'TypeAnything';
  var prototype = __extends(TypeAnything, _super).prototype, constructor = TypeAnything;
  function TypeAnything(){
    TypeAnything.superclass.call(this, "anything");
  }
  return TypeAnything;
}(Type));
TypeInteger = (function(_super){
  TypeInteger.displayName = 'TypeInteger';
  var prototype = __extends(TypeInteger, _super).prototype, constructor = TypeInteger;
  function TypeInteger(){
    TypeInteger.superclass.call(this, "anything");
  }
  return TypeInteger;
}(Type));
TypeDate = (function(_super){
  TypeDate.displayName = 'TypeDate';
  var prototype = __extends(TypeDate, _super).prototype, constructor = TypeDate;
  function TypeDate(){
    TypeDate.superclass.call(this, "anything");
  }
  return TypeDate;
}(Type));
TypeNull = (function(_super){
  TypeNull.displayName = 'TypeNull';
  var prototype = __extends(TypeNull, _super).prototype, constructor = TypeNull;
  function TypeNull(){
    TypeNull.superclass.call(this, "null");
  }
  return TypeNull;
}(Type));
TypeUndefined = (function(_super){
  TypeUndefined.displayName = 'TypeUndefined';
  var prototype = __extends(TypeUndefined, _super).prototype, constructor = TypeUndefined;
  function TypeUndefined(){
    TypeUndefined.superclass.call(this, "undefined");
  }
  return TypeUndefined;
}(Type));
TypeRef = (function(_super){
  TypeRef.displayName = 'TypeRef';
  var prototype = __extends(TypeRef, _super).prototype, constructor = TypeRef;
  TypeRef.types = {};
  TypeRef.declare = (function(){
    function declare(name, ref){
      return this.types[name] = ref;
    }
    return declare;
  }());
  function TypeRef(name, type){
    this.name = name;
    this.type = type;
    TypeRef.superclass.call(this, "ref_" + this.name);
    TypeRef.declare(name, this);
  }
  return TypeRef;
}(Type));
TypeRefCall = (function(_super){
  TypeRefCall.displayName = 'TypeRefCall';
  var prototype = __extends(TypeRefCall, _super).prototype, constructor = TypeRefCall;
  function TypeRefCall(name){
    this.name = name;
  }
  prototype.getRef = (function(){
    function getRef(){
      return TypeRef.types[this.name];
    }
    return getRef;
  }());
  return TypeRefCall;
}(Type));
exports.TypeInteger = TypeInteger;
exports.TypeAnything = TypeAnything;
exports.TypeBoolean = TypeBoolean;
exports.TypeNumber = TypeNumber;
exports.TypeString = TypeString;
exports.TypeArray = TypeArray;
exports.TypeObject = TypeObject;
exports.TypeProperty = TypeProperty;
exports.TypeChoice = TypeChoice;
exports.TypeDate = TypeDate;
exports.TypeRef = TypeRef;
exports.TypeRefCall = TypeRefCall;
exports.TypeNull = TypeNull;
exports.TypeUndefined = TypeUndefined;
exports.TypePropertyList = TypePropertyList;
function __extends(sub, sup){
  function ctor(){} ctor.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new ctor).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}