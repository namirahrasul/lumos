var LVariable, BinaryOperator;
LVariable = require("./literals").LVariable;
BinaryOperator = (function(){
  BinaryOperator.displayName = 'BinaryOperator';
  var prototype = BinaryOperator.prototype, constructor = BinaryOperator;
  BinaryOperator.is = (function(){
    function is(left, right){
      return new BinaryOperator('is', "is not", left, right);
    }
    return is;
  }());
  BinaryOperator['in'] = (function(){
    function $in(left, right){
      return new BinaryOperator('in', "not in", left, right);
    }
    return $in;
  }());
  BinaryOperator.gt = (function(){
    function gt(left, right){
      return new BinaryOperator('>', null, left, right);
    }
    return gt;
  }());
  BinaryOperator.gte = (function(){
    function gte(left, right){
      return new BinaryOperator('>=', null, left, right);
    }
    return gte;
  }());
  BinaryOperator.lt = (function(){
    function lt(left, right){
      return new BinaryOperator('<', null, left, right);
    }
    return lt;
  }());
  BinaryOperator.lte = (function(){
    function lte(left, right){
      return new BinaryOperator('<=', null, left, right);
    }
    return lte;
  }());
  BinaryOperator.and = (function(){
    function and(left, right){
      return new BinaryOperator('and', null, left, right);
    }
    return and;
  }());
  BinaryOperator.or = (function(){
    function or(left, right){
      return new BinaryOperator('or', null, left, right);
    }
    return or;
  }());
  function BinaryOperator(op, not_op, left, right){
    this.op = op;
    this.not_op = not_op;
    this.left = left;
    this.right = right;
    this.negated = false;
    this.not_op == null && (this.not_op = this.op);
    this.left == null && (this.left = new LVariable(""));
  }
  return BinaryOperator;
}());
exports.BinaryOperator = BinaryOperator;