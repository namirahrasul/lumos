var LNumber, LString, LList, LBoolean, LFunCall, LVariable, LUndefined, LNull;
LNumber = (function(){
  LNumber.displayName = 'LNumber';
  var prototype = LNumber.prototype, constructor = LNumber;
  function LNumber(num){
    this.num = num != null ? num : 0;
  }
  return LNumber;
}());
LString = (function(){
  LString.displayName = 'LString';
  var prototype = LString.prototype, constructor = LString;
  function LString(str){
    this.str = str != null ? str : "";
  }
  return LString;
}());
LList = (function(){
  LList.displayName = 'LList';
  var prototype = LList.prototype, constructor = LList;
  function LList(list){
    this.list = list;
  }
  return LList;
}());
LBoolean = (function(){
  LBoolean.displayName = 'LBoolean';
  var prototype = LBoolean.prototype, constructor = LBoolean;
  function LBoolean(value){
    this.value = value;
  }
  return LBoolean;
}());
LFunCall = (function(){
  LFunCall.displayName = 'LFunCall';
  var prototype = LFunCall.prototype, constructor = LFunCall;
  function LFunCall(name, args){
    this.name = name;
    this.args = args != null
      ? args
      : [];
  }
  return LFunCall;
}());
LVariable = (function(){
  LVariable.displayName = 'LVariable';
  var prototype = LVariable.prototype, constructor = LVariable;
  function LVariable(name){
    this.name = name;
  }
  return LVariable;
}());
LUndefined = (function(){
  LUndefined.displayName = 'LUndefined';
  var prototype = LUndefined.prototype, constructor = LUndefined;
  function LUndefined(){}
  return LUndefined;
}());
LNull = (function(){
  LNull.displayName = 'LNull';
  var prototype = LNull.prototype, constructor = LNull;
  function LNull(){}
  return LNull;
}());
exports.LString = LString;
exports.LNumber = LNumber;
exports.LList = LList;
exports.LBoolean = LBoolean;
exports.LFunCall = LFunCall;
exports.LVariable = LVariable;
exports.LUndefined = LUndefined;
exports.LNull = LNull;